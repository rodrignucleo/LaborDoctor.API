// <auto-generated />
using System;
using LaborDoctor.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaborDoctor.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LaborDoctor.API.Models.ClinicaModel", b =>
                {
                    b.Property<int>("id_clinica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("varchar(19)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nome_fantasia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("senha_antiga")
                        .HasColumnType("longtext");

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_clinica");

                    b.ToTable("tb_clinica");

                    b.HasData(
                        new
                        {
                            id_clinica = 1,
                            cnpj = "11.777.5555/0001-99",
                            email = "root",
                            nome = "root Clinica",
                            nome_fantasia = "root Clinica",
                            senha = "$2a$11$.BPKGSKyr3agRZsqX4QKjeHdUxY2ejvqa/QZJ/QBcSOcC1H322QJW",
                            senha_antiga = "$2a$11$XqUuE6eAXWhY0.UIvTX6teyLIdCF4S9hoOhBmhQerM2hwvvDVyhBy",
                            telefone = "(45) 96666-1234"
                        },
                        new
                        {
                            id_clinica = 2,
                            cnpj = "10.136.4860/0001-85",
                            email = "gndi@clinica.com",
                            nome = "GNDI",
                            nome_fantasia = "GNDI",
                            senha = "$2a$11$a9KlXt2EC4OnncuvX5SXRum5AaLkrqBJKp3ncRESreBt5AUlLAT3.",
                            senha_antiga = "$2a$11$RG0cJBhtejqs1..aej7D7eFcEZ0AgVjp7Vii2ZQFKb1ImvOvNqyQ.",
                            telefone = "(11) 98524-5698"
                        });
                });

            modelBuilder.Entity("LaborDoctor.API.Models.ConsultaModel", b =>
                {
                    b.Property<int>("id_consulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("id_medico")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("id_paciente")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("id_schedule")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("id_consulta");

                    b.HasIndex("id_medico");

                    b.HasIndex("id_paciente");

                    b.HasIndex("id_schedule");

                    b.ToTable("tb_consulta");
                });

            modelBuilder.Entity("LaborDoctor.API.Models.MedicoModel", b =>
                {
                    b.Property<int>("id_medico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("crm")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("especilidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_medico");

                    b.ToTable("tb_medico");

                    b.HasData(
                        new
                        {
                            id_medico = 1,
                            cpf = "12345678910",
                            crm = "045465/SP",
                            email = "rodrignucleo@labordoctor.com",
                            especilidade = "Cardiologista",
                            nome = "Rodrigo Ribeiro",
                            telefone = "11992668225"
                        },
                        new
                        {
                            id_medico = 2,
                            cpf = "98765412398",
                            crm = "221748/PR",
                            email = "patricia.oliveira@labordoctor.com",
                            especilidade = "Ginecologista",
                            nome = "Patricia Oliveira",
                            telefone = "9899265826597"
                        });
                });

            modelBuilder.Entity("LaborDoctor.API.Models.PacienteModel", b =>
                {
                    b.Property<int>("id_paciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("senha_antiga")
                        .HasColumnType("longtext");

                    b.Property<string>("telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id_paciente");

                    b.ToTable("tb_paciente");

                    b.HasData(
                        new
                        {
                            id_paciente = 1,
                            cpf = "111.222.333-44",
                            email = "root",
                            nome = "root Paciente",
                            senha = "$2a$11$tobR69JpNGrjJOIHvBxzEubnlyMeFvQGfnNh4cjlERXM.zfqF3Wwm",
                            senha_antiga = "$2a$11$sL8CvN4vsttkRF70gOyKcutncrtkn5Gr.wxkcq5m.tBBj0.LgmjTW",
                            telefone = "(45) 96666-1234"
                        },
                        new
                        {
                            id_paciente = 2,
                            cpf = "987.458.236-98",
                            email = "estevao@labordoctor.com",
                            nome = "Estevão Rocha",
                            senha = "$2a$11$whrcnXRFb5XACv8XggPF7unAiEExwuZaZTe4scqQXCumJzNjLMCku",
                            senha_antiga = "$2a$11$S9eg7IHpCy9sP1RYEeuI9OYTaDcgnpqQ4h2AfUJFIpv.RVdwV49LO",
                            telefone = "(11) 99478-5200"
                        });
                });

            modelBuilder.Entity("LaborDoctor.API.Models.ScheduleModel", b =>
                {
                    b.Property<int>("id_schedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("data")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("id_medico")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("id_schedule");

                    b.HasIndex("id_medico");

                    b.ToTable("tb_schedule");
                });

            modelBuilder.Entity("LaborDoctor.API.Models.ConsultaModel", b =>
                {
                    b.HasOne("LaborDoctor.API.Models.MedicoModel", "medico")
                        .WithMany()
                        .HasForeignKey("id_medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborDoctor.API.Models.PacienteModel", "paciente")
                        .WithMany()
                        .HasForeignKey("id_paciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaborDoctor.API.Models.ScheduleModel", "schedule")
                        .WithMany()
                        .HasForeignKey("id_schedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medico");

                    b.Navigation("paciente");

                    b.Navigation("schedule");
                });

            modelBuilder.Entity("LaborDoctor.API.Models.ScheduleModel", b =>
                {
                    b.HasOne("LaborDoctor.API.Models.MedicoModel", "medico")
                        .WithMany()
                        .HasForeignKey("id_medico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("medico");
                });
#pragma warning restore 612, 618
        }
    }
}
